<?php

namespace MauticPlugin\LeuchtfeuerCompanyTagsBundle\Tests\Functional\Permissions;

use Mautic\CoreBundle\Test\MauticMysqlTestCase;
use Mautic\LeadBundle\Entity\Company;
use Mautic\PluginBundle\Entity\Integration;
use Mautic\PluginBundle\Entity\Plugin;
use Mautic\UserBundle\Entity\Permission;
use Mautic\UserBundle\Entity\Role;
use Mautic\UserBundle\Entity\User;
use Mautic\UserBundle\Model\RoleModel;
use MauticPlugin\LeuchtfeuerCompanyTagsBundle\Entity\CompanyTags;
use MauticPlugin\LeuchtfeuerCompanyTagsBundle\Model\CompanyTagModel;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class CompanyTagPermissionsTest extends MauticMysqlTestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->activePlugin();
    }

    private function activePlugin(bool $isPublished = true): void
    {
        $this->client->request('GET', '/s/plugins/reload');
        $integration = $this->em->getRepository(Integration::class)->findOneBy(['name' => 'LeuchtfeuerCompanyTags']);
        if (empty($integration)) {
            $plugin      = $this->em->getRepository(Plugin::class)->findOneBy(['bundle' => 'LeuchtfeuerCompanyTagsBundle']);
            $integration = new Integration();
            $integration->setName('LeuchtfeuerCompanyTags');
            $integration->setPlugin($plugin);
            $integration->setApiKeys([]);
        }
        $integration->setIsPublished($isPublished);
        $this->em->getRepository(Integration::class)->saveEntity($integration);
        $this->em->persist($integration);
        $this->em->flush();
        $this->useCleanupRollback = false;
        $this->setUpSymfony($this->configParams);
    }

    public function testCheckPermissionIsEnable(): void
    {
        $this->client->request('GET', '/s/roles/new');
        $this->assertResponseStatusCodeSame(200);
        $this->assertStringContainsString('Company Tags - User has access to', $this->client->getResponse()->getContent());
    }

    public function testCreateEditCompanyTagWithAdminPermissionSuccess(): void
    {
        $userName     = 'testuser99';
        $password     = '123User***321';
        $companyTags1 = $this->addCompanyTag('CompanyTag1123', 'Description tag 1');
        $user         = $this->newUserWithPermission(
            $userName,
            $password,
            true,
            ['companytag:companytags'=> []]
        );
        $this->newLogin($user, $password);
        $this->client->request('GET', '/s/companytag/new');
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
        $this->assertResponseStatusCodeSame(200);
        $this->client->request('GET', '/s/companytag/edit/'.$companyTags1->getId());
        $this->assertResponseStatusCodeSame(200);
    }

    public function testEditCompanyTagWithPermissionViewEditSuccess(): void
    {
        $userName     = 'testuser99';
        $password     = '123User***321';
        $companyTags1 = $this->addCompanyTag('CompanyTag1', 'Description tag 1');
        $user         = $this->newUserWithPermission(
            $userName,
            $password,
            false,
            [
                'companytag:companytags' => ['view', 'edit'],
            ]
        );

        $this->newLogin($user, $password);

        $this->client->request('GET', '/s/companytag/edit/'.$companyTags1->getId());
        $this->assertResponseStatusCodeSame(200);
        $this->assertStringContainsString('CompanyTag1', $this->client->getResponse()->getContent());
    }

    public function testEditCompanyTagWithPermissionViewCreateFailToEdit(): void
    {
        $userName     = 'testuser99';
        $password     = '123User***321';
        $companyTags1 = $this->addCompanyTag('CompanyTag1', 'Description tag 1');
        $user         = $this->newUserWithPermission(
            $userName,
            $password,
            false,
            [
                'companytag:companytags' => ['view', 'create'],
            ]
        );

        $this->newLogin($user, $password);

        $this->client->request('GET', '/s/companytag/edit/'.$companyTags1->getId());
        $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());
    }

    public function testNewUserWithRoleAccesingViewSuccessCompanyTagsPage(): void
    {
        $companyTags1 = $this->addCompanyTag('CompanyTag2', 'Description tag 1');

        $password = '123User***321';
        $username = 'testuser1000';

        $user = $this->newUserWithPermission(
            $username,
            $password,
            false,
            ['companytag:companytags'=> ['view']]
        );

        $this->newLogin($user, $password);

        $this->client->request('GET', '/s/companytag');
        $this->assertStringContainsString('CompanyTag2', $this->client->getResponse()->getContent());
        $this->assertResponseStatusCodeSame(200);
        $this->client->request('GET', '/s/companytag/view/'.$companyTags1->getId());
        $this->assertResponseStatusCodeSame(200);
        $this->assertStringContainsString('CompanyTag2', $this->client->getResponse()->getContent());
    }

    public function testNewUserWithRoleAccesingWithNoPermissionFailCompanyTagsPage(): void
    {
        $companyTags1 = $this->addCompanyTag('CompanyTag1', 'Description tag 1');
        $password     = '123User***321';
        $username     = 'testuser1000';

        $user = $this->newUserWithPermission(
            $username,
            $password,
            false,
            ['companytag:companytags'=> []]
        );

        // Disable the default logging in via username and password.
        $this->clientServer = [];
        $this->setUpSymfony($this->configParams);
        $this->loginUser($user->getUserIdentifier());
        $this->client->setServerParameter('PHP_AUTH_USER', $user->getUserIdentifier());
        $this->client->setServerParameter('PHP_AUTH_PW', $password);

        $this->client->request('GET', '/s/companytag');
        $this->assertsame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());
        $this->client->request('GET', '/s/companytag/view/'.$companyTags1->getId());
        $this->assertsame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());
        $this->client->request('GET', '/s/companytag/edit/'.$companyTags1->getId());
        $this->assertsame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());
        $this->client->request('GET', '/s/companytag/new');
        $this->assertsame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());
    }

    public function testCompanyTagAjaxFailView(): void
    {
        $companyTags1 = $this->addCompanyTag('CompanyTag2323', 'Description tag 1');

        $companies    = $this->addCompany([$companyTags1], 'Test Company');
        $company      = $companies['company'];

        $password = '123User***321';
        $username = 'testuser1000';

        $user = $this->newUserWithPermission(
            $username,
            $password,
            false,
            ['companytag:companytags'=> ['view']]
        );

        $this->newLogin($user, $password);
        $this->client->request('GET', '/s/ajax?action=plugin:LeuchtfeuerCompanyTags:removeCompanyCompanyTag', ['companyId' => $company->getId(), 'tagId' => $companies['tags'][0]->getId()]);
        $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());
        $this->client->request('GET', '/s/ajax?action=plugin:LeuchtfeuerCompanyTags:addCompanyTags', ['companyId' => $company->getId(), 'tagId' => $companies['tags'][0]->getId()]);
        $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());
    }

    public function testCompanyTagApiAddCompanyTagToCompanySuccess(): void
    {
        $companyTags1 = $this->addCompanyTag('CompanyTag2323', 'Description tag 1');

        $company = new Company();
        $company->setName('Test Company');
        $this->em->persist($company);
        $this->em->flush();

        $password = '123User***321';
        $username = 'testuser10001';

        $user = $this->newUserWithPermission(
            $username,
            $password,
            false,
            ['companytag:companytags'=> ['view', 'edit']]
        );

        $this->newLogin($user, $password);
        $this->client->request(
            Request::METHOD_POST,
            "/api/companytags/{$company->getId()}/add",
            [
                'tags' => [
                    $companyTags1->getId(),
                ],
            ]
        );

        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
    }

    public function testCompanyTagApiRemoveCompanyTagFromCompanySuccess(): void
    {
        $companyTags1 = $this->addCompanyTag('CompanyTag2323', 'Description tag 1');

        $companies    = $this->addCompany([$companyTags1], 'Test Company');
        $company      = $companies['company'];

        $password = '123User***321';
        $username = 'testuser1000';

        $user = $this->newUserWithPermission(
            $username,
            $password,
            false,
            ['companytag:companytags'=> ['view', 'edit']]
        );

        $this->newLogin($user, $password);
        $this->client->request('POST', '/api/companytags/'.$company->getId().'/remove', ['tags' => [$companyTags1->getId()]]);
        $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());
    }

    public function testCompanyTagApiAddCompanyTagToCompanyFail(): void
    {
        $companyTags1 = $this->addCompanyTag('CompanyTag2323', 'Description tag 1');

        $company = new Company();
        $company->setName('Test Company');
        $this->em->persist($company);
        $this->em->flush();

        $password = '123User***321';
        $username = 'testuser10003332';

        $user = $this->newUserWithPermission(
            $username,
            $password,
            false,
            ['companytag:companytags'=> ['view']]
        );

        $this->newLogin($user, $password);
        $this->client->request('POST', '/api/companytags/'.$company->getId().'/add', ['tags' => [$companyTags1->getId()]]);
        $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());
    }

    public function testCompanyTagApiRemoveCompanyTagFromCompanyFail(): void
    {
        $companyTags1 = $this->addCompanyTag('CompanyTag2323', 'Description tag 1');

        $company = new Company();
        $company->setName('Test Company');
        $this->em->persist($company);
        $this->em->flush();

        $password = '123User***321';
        $username = 'testuser1000';

        $user = $this->newUserWithPermission(
            $username,
            $password,
            false,
            ['companytag:companytags'=> ['view']]
        );

        $this->newLogin($user, $password);
        $this->client->request('POST', '/api/companytags/'.$company->getId().'/remove', ['tags' => [$companyTags1->getId()]]);
        $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());
    }

    /**
     * @param array<CompanyTags> $tags
     *
     * @return array<string,mixed>|bool
     */
    private function addCompany(array $tags=[], string $nameCompany = 'Test Company'): array|bool
    {
        if (empty($tags)) {
            return false;
        }
        $company = new Company();
        $company->setName($nameCompany);
        $this->em->persist($company);
        $this->em->flush();

        $companyTag = static::getContainer()->get(CompanyTagModel::class);
        $companyTag->updateCompanyTags($company, $tags);

        return [
            'company' => $company,
            'tags'    => $companyTag->getTagsByCompany($company),
        ];
    }

    private function newLogin(User $user, string $password): void
    {
        // Disable the default logging in via username and password.
        $this->clientServer = [];
        $this->setUpSymfony($this->configParams);
        $this->loginUser($user->getUserIdentifier());
        $this->client->setServerParameter('PHP_AUTH_USER', $user->getUserIdentifier());
        $this->client->setServerParameter('PHP_AUTH_PW', $password);
    }

    private function addCompanyTag(string $name = 'Company Tag', string $description = 'Description tag 1'): CompanyTags
    {
        $companyTags1 = new CompanyTags();
        $companyTags1->setTag($name);
        $companyTags1->setDescription($description);
        $this->em->persist($companyTags1);
        $this->em->flush();

        return $companyTags1;
    }

    /**
     * @param array<string,array<string>> $permissions
     */
    private function newUserWithPermission(string $username, string $password, bool $isAdmin=false, array $permissions=[]): User
    {
        $role           = $this->createRole($isAdmin);
        $user           = $this->createUser($role, $password, $username);

        $this->setPermission($user, $permissions, $isAdmin);

        return $user;
    }

    /**
     * @param array<array<string>> $permissions
     */
    private function setPermission(User $user, array $permissions, bool $isAdmin = false): void
    {
        $role = $user->getRole();
        // Delete previous permissions
        $this->em->createQueryBuilder()
            ->delete(Permission::class, 'p')
            ->where('p.bundle = :bundle')
            ->andWhere('p.role = :role_id')
            ->setParameters(['bundle' => 'report', 'role_id' => $role->getId()])
            ->getQuery()
            ->execute();

        // Set new permissions
        $role->setIsAdmin($isAdmin);
        $roleModel = static::getContainer()->get('mautic.user.model.role');
        \assert($roleModel instanceof RoleModel);
        $roleModel->setRolePermissions($role, $permissions);
        $this->em->persist($role);
        $this->em->flush();
    }

    private function createUser(Role $role, string $password='Maut1cR0cks', string $userName='usercompanytags'): User
    {
        $user = new User();
        $user->setFirstName('John');
        $user->setLastName('Doe');
        $user->setUsername($userName);
        $user->setEmail($userName.'@mautic.com');
        $encoder = static::getContainer()->get('security.encoder_factory')->getEncoder($user);
        $user->setPassword($encoder->encodePassword($password, null));
        $user->setRole($role);

        $this->em->persist($user);
        $this->em->flush();

        return $user;
    }

    private function createRole(bool $isAdmin = false): Role
    {
        $role = new Role();
        $role->setName('Role');
        $role->setIsAdmin($isAdmin);
        $role->setIsPublished(true);

        $this->em->persist($role);
        $this->em->flush();

        return $role;
    }
}
